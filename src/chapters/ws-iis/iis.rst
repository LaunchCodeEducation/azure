.. _iis:

=================================
Introduction to Web Servers & IIS
=================================

The Internet Information Service (IIS) is a **Web Server** made for exclusive use by machines running Windows Server OS. IIS makes it easy to serve web media like static content and dynamic content generated by .NET web applications. IIS can be added to any server that assumes the Web Server Role. It is deeply customizable offering dozens of additional Role Services for things like authentication, caching, logging and more.

Components of Web Hosting
=========================

When learning about hosting content on the web you will come across the terms **Server**, **Web Server**, **Application Server**, and **Application Server Framework** and will likely be confused on what role each of them play. While these terms are mistakenly used interchangeably it is important to distinguish them to form a strong mental model. Understanding and properly communicating the details of a web hosting system are critical aspects of being able to troubleshoot and solve problems that arise.

Before we get into defining each of these, consider the following diagram that shows how the components of a web hosting system relate to each other:

.. todo:: replace placeholder diagram, add ASF connector between Web Server and Application Server

.. image:: /_static/images/ws/server-boxes.jpg
  :alt: Server, Web Server and Application Server relationship diagram

Server
------

A **Server**, or **host machine**, is the broadest and most ambiguous of these terms. In technical terms it refers to the physical, or virtualized, hardware itself -- like a Windows Server or Linux machine. Think of this as the outermost box of the system, it holds each of the other components within it. Servers **do not necessarily have anything to do with the web**, they are just powerful machines whose roles are defined by the software they run. 

When discussing web-related roles a Server is responsible for handling network requests of various protocols and passing the packets off to the appropriate service for handling them. In our context the packets are passed off to a Web Server service designed for managing raw HTTP traffic.

Web Server
----------

The **Web Server** is responsible for handling the low-level HTTP logic needed to process requests and send off responses. They are usually written in similarly low-level languages like C or C++ to maximize their performance in handling thousands of requests at a time. Web Servers **do not contain business logic code** and are only modified using configuration files written in XML or other proprietary formats.

Web Servers can be used to serve **static content** (content that does not change programmatically) like HTML, CSS, JavaScript, images and other files located on the Server. When serving **dynamic content** a Web Server acts as the middle man between the Server machine and the Application Server that generates the dynamic content.

Web Servers handle things like:

- serving static content
- load balancing and rate limiting
- TLS termination for secure (HTTPS) connections
- decompression and compression of requests and responses

Web Application Server
----------------------

A web **Application Server** is defined by the source code that developers work on. It is written in C#/ASP.NET, NodeJS/Express, PHP/Laravel or any other number of language and **Application Server Framework** combinations. Application Servers are made up of code that defines **business logic for working with data and processing requests**. They are **not responsible** for managing HTTP logic and raw packets. Instead, they deal with Request and Response objects within the code that are managed by the Web Application Framework.

Application Servers handle things like:

- authorization logic
- rendering HTML templates
- connecting to and interacting with database servers

Web Application Framework
-------------------------

Application Server Frameworks, like ASP.NET, **have connectors for transforming** raw HTTP requests received from a Web Server into Request objects that can be processed by the Application Server's business logic code. When they are done processing the request they send out a Response object through another connector to transform it into a raw HTTP response for the Web Server to work with.

.. todo:: replace placeholder diagram

.. image:: /_static/images/ws/framework-connector.jpg
  :alt: Web Application Framework connector between Web Server and Application Server

Kestrel Web Server
==================

All ASP.NET Application Servers come packaged with a *lightweight* Web Server called Kestrel. When you run your Application Server on your local machine it is Kestrel that manages the underlying HTTP logic. This is done transparently for you to only have to work with Request and Response objects themselves. However, being a lightweight Web Server, Kestrel has limited capabilities. For this reason it is not recommended to use Kestrel by itself, as referenced in its `Microsoft documentation <https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-3.1>`_.

As we saw in our first Linux deployment the Kestrel Web Server can be used behind a more robust Web Server like Nginx in a `reverse proxy arrangement <https://www.cloudflare.com/learning/cdn/glossary/reverse-proxy/>`_. But when you have the luxury of working with a Windows Server machine the IIS Web Server is hands-down the best choice for the job. 

IIS Web Server
==============

Advantages over default Kestrel Web Server
------------------------------------------

Serving Static Sites
--------------------

Serving Dotnet Web Applications
-------------------------------

Next Step
=========
